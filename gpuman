#!/bin/sh
# gpuman
# Copyright 2021 <kreato@kreatea.space>
#
# This file is part of gpuman.
#
# gpuman is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# gpuman is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with gpuman. If not, see <https://www.gnu.org/licenses/>.
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'
VERSION=1.4.1
if [ "$XORG" = "" ]; then
	XORG=sx
fi
if [ "$ROOT" = "" ]; then
	ROOT=doas
fi
case $1 in
"--help" | "-h" )
printf """usage: ${GREEN}gpuman${NC} [${GREEN}--version${NC}] [${GREEN}--help${NC}] [${GREEN}--debug${NC}] [${GREEN}--switch${NC}] ${GREEN}nvidia/intel${NC}
Manage used GPU.

positional arguments:
${BLUE}nvidia/intel${NC}       GPU name (available GPUs are nvidia and intel)

optional arguments:
 ${BLUE}-h${NC}, ${GREEN}--help${NC}    show this help message and exit
 ${BLUE}-s${NC}, ${GREEN}--switch${NC}  switch the GPU
 ${BLUE}-v${NC}, ${GREEN}--version${NC} display version number
 ${BLUE}-g${NC}, ${GREEN}--gpu${NC}     display running GPU
 ${BLUE}-d${NC}, ${GREEN}--debug${NC}   display debug information, required for opening an issue
environment variables:
  ${BLUE}ROOT${NC} the command gpuman uses to gain root access, ${BLUE}doas${NC} is the default
  ${BLUE}XORG${NC} the xorg command that gpuman kills in order to kill the Xorg, ${BLUE}sx${NC} is the default
 \n"""
 ;;
"--debug" | "-d" )
	printf """
debug information:
XORG variable: $XORG
ROOT variable $ROOT
version: $VERSION
system information:
glxinfo output (with grep):
$(glxinfo | grep "OpenGL")
checking if nvidia-smi runs without an issue (0 means works, anything else means it doesnt)
$(nvidia-smi > /dev/null ; echo $?)
environment variables:
$(env)
"""
;;
"--run" | "-r" )
	__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo
	;;
"--version" | "-v" )
	printf  "${BLUE}gpu${GREEN}man ${BLUE}v$VERSION${NC}\n"
	;;
"--gpu" | "-g" )
	if [ "$(glxinfo | grep 'Intel' > /dev/null ; echo $?)" = "0" ]; then
		printf "${BLUE}GPU${NC}: ${BLUE}intel${NC}\n"
	elif [ "$(glxinfo | grep 'NVIDIA' > /dev/null ; echo $?)" = "0" ]; then
		printf "${GREEN}GPU${NC}: ${GREEN}nvidia${NC}\n"
	else
		printf "${RED}error${NC}: An error occured while trying to detect the GPU! Check if you have glxinfo installed!\n"
	fi
	;;
"--switch" | "-s" ) 
	if [ "$2" = "" ]; then
		printf "${RED}error${NC}: please specify a gpu (options are intel and nvidia)\n"
	elif [ "$2" = "nvidia" ]; then
		printf "${BLUE}switching to nvidia${NC}\n"
		if [ "$XORG" = "xinit" ] || [ "$XORG" = "startx" ]; then
		        sed -i '1 i\xrandr --setprovideroutputsource modesetting NVIDIA-0' ~/.xinitrc
                	sed -i '2 i\xrandr --auto' ~/.xinitrc
                	sed -i '3 i\xrandr --dpi 96' ~/.xinitrc
		elif [ "$XORG" = "lightdm" ]; then
			printf "${BLUE}installing lightdm script, you need to give your password when asked${NC}\n"
			echo '''
#!/bin/sh
xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto
# Run the rest of the arguments.
# -
$($@)
			''' | $ROOT tee /usr/local/bin/prepare-optimus.sh
			$ROOT cp -f /etc/lightdm/lightdm.conf /etc/lightdm/lightdm.conf.bak                        
			echo '''
[Seat:*]
# display-setup-script = Script to run when starting a greeter session (runs as root)
display-setup-script=/usr/local/bin/prepare-optimus.sh
			''' | $ROOT tee -a /etc/lightdm/lightdm.conf
		else 
			sed -i '1 i\xrandr --setprovideroutputsource modesetting NVIDIA-0' ~/.config/sx/sxrc 
			sed -i '2 i\xrandr --auto' ~/.config/sx/sxrc 
			sed -i '3 i\xrandr --dpi 96' ~/.config/sx/sxrc
		fi
		printf "${BLUE}installing xorg config, you need to give your password when asked${NC}\n"
		if [[ ! -d "/etc/X11/xorg.conf.d/" ]]; then
    			$ROOT mkdir -p /etc/X11/xorg.conf.d/
		fi
		echo '''
Section "OutputClass"
    	Identifier "intel"
    	MatchDriver "i915"
    	Driver "modesetting"
EndSection

Section "OutputClass"
    	Identifier "nvidia"
    	MatchDriver "nvidia-drm"
    	Driver "nvidia"
    	Option "AllowEmptyInitialConfiguration"
    	Option "PrimaryGPU" "yes"
    	ModulePath "/usr/lib/nvidia/xorg"
	ModulePath "/usr/lib/xorg/modules"
EndSection
		''' | $ROOT tee /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf
		printf "${BLUE}killing xorg${NC}\n"
		killall $XORG
	elif [ "$2" = "intel" ]; then
		printf "${BLUE}switching back to intel...${NC}\n"
		if [ "$XORG" = "xinit" ] || [ "$XORG" = "startx" ]; then
		      sed -i 's/xrandr --setprovideroutputsource modesetting NVIDIA-0/ /g'  ~/.xinitrc
                      sed -i 's/xrandr --auto/ /g'  ~/.xinitrc
  	              sed -i 's/xrandr --dpi 96/ /g'  ~/.xinitrc
		elif [ "$XORG" = "lightdm" ]; then
	      		printf "${BLUE}removing lightdm script, you need to give your password when asked${NC}\n"
			$ROOT rm -f /usr/local/bin/prepare-optimus.sh
			$ROOT cp -f /etc/lightdm/lightdm.conf.bak /etc/lightdm/lightdm.conf 
		else
			sed -i 's/xrandr --setprovideroutputsource modesetting NVIDIA-0/ /g'  ~/.config/sx/sxrc
			sed -i 's/xrandr --auto/ /g'  ~/.config/sx/sxrc
			sed -i 's/xrandr --dpi 96/ /g'  ~/.config/sx/sxrc
		fi
		printf "${BLUE}removing xorg config, you need to give your password when asked${NC}\n"
		$ROOT rm -f /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf
		printf "${BLUE}killing xorg...${NC}\n"
		killall Xorg
		killall X
	else
		printf "${RED}error${NC}: invalid gpu name (only options are intel and nvidia)\n"
	fi
	;;
*)
	 printf "${RED}error${NC}: please specify an proper argument, ${GREEN}--help${NC} for help\n"

esac		
